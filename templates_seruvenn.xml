<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Saga Orkestratörünü kullanan Tetikleyici tipte servis oluşturmak için kullanılan şablondur. Bir Spring Boot Service çerçevesinde çalışır." enabled="true" name="seruvenn_tetikleyici_servis">import org.springframework.beans.factory.annotation.Autowired;&#13;
import org.springframework.stereotype.Service;&#13;
&#13;
import com.ikite.seruvenn.Commons.carriers.Foo;&#13;
import com.ikite.seruvenn.Commons.saga.SagaCodes;&#13;
import com.ikite.seruvenn.SagaOrchestrator.exception.CommandGenerationException;&#13;
import com.ikite.seruvenn.SagaOrchestrator.exception.SagaDefinitionException;&#13;
import com.ikite.seruvenn.SagaOrchestrator.service.impl.SagaOrchestratorService;&#13;
&#13;
@Service&#13;
public class ${class_name}{&#13;
&#13;
	@Autowired&#13;
	SagaOrchestratorService sagaOrchestratorService;&#13;
	&#13;
	public String callSampleSaga() {&#13;
		&#13;
		try {&#13;
			sagaOrchestratorService.startSaga(SagaCodes.XXXX_SAGA_CODE, new Foo());&#13;
		&#13;
		} catch (SagaDefinitionException e) {&#13;
			// TODO Auto-generated catch block&#13;
			e.printStackTrace();&#13;
		&#13;
		} catch (CommandGenerationException e) {&#13;
			// TODO Auto-generated catch block&#13;
			e.printStackTrace();&#13;
		}&#13;
		return "success";&#13;
		&#13;
	}&#13;
	&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="EventManager kullanan bir Tüketici tipi servis oluşturma şablonudur. Component bloğu içinde çalışır." enabled="true" name="seruvenn_tuketici_servis">import org.apache.kafka.streams.kstream.KStream;&#13;
import org.slf4j.Logger;&#13;
import org.slf4j.LoggerFactory;&#13;
import org.springframework.beans.factory.annotation.Autowired;&#13;
import org.springframework.core.env.Environment;&#13;
import org.springframework.stereotype.Component;&#13;
&#13;
import com.ikite.seruvenn.Commons.carriers.Foo;&#13;
import com.ikite.seruvenn.Commons.message.CommandType;&#13;
import com.ikite.seruvenn.Commons.message.EventType;&#13;
import com.ikite.seruvenn.Commons.message.Message;&#13;
import com.ikite.seruvenn.Commons.stream.impl.StreamBase;&#13;
import com.ikite.seruvenn.EventManager.services.IEventBuilderService;&#13;
&#13;
@SuppressWarnings("rawtypes")&#13;
@Component&#13;
public class ${class_name} extends StreamBase {&#13;
	&#13;
	private static final Logger LOG = LoggerFactory.getLogger(${class_name}.class);&#13;
&#13;
	@Autowired&#13;
	IEventBuilderService eventBuilderService;&#13;
&#13;
	@Autowired&#13;
	public ${class_name}(Environment env) {&#13;
		super(env);&#13;
	}&#13;
&#13;
	@Override&#13;
	public KStream&lt;String, Message&gt; buildForwardStream() {&#13;
&#13;
		//success stream&#13;
		return forwardCommandStream.map((key, command) -&gt; {&#13;
&#13;
			//TODO business code buraya girilecek&#13;
&#13;
			try {&#13;
				return eventBuilderService.buildNewStreamEvent(key, EventType.XXXX_SUCCESSFUL.toString(), command.getSagaCode(), new YYYY());&#13;
			} catch (Exception e) {&#13;
				LOG.error(e.getMessage());&#13;
				return null;&#13;
			}&#13;
&#13;
		});&#13;
&#13;
	}&#13;
&#13;
	@Override&#13;
	public KStream&lt;String, Message&gt; buildReverseStream() {&#13;
&#13;
		//fail stream&#13;
		return reverseCommandStream.map((key, command) -&gt; {&#13;
&#13;
			//TODO ters business code buraya girilecek&#13;
&#13;
			try {&#13;
				return eventBuilderService.buildNewStreamEvent(key, EventType.XXXX_ROLLBACK_OK.toString(), command.getSagaCode(), new ZZZZ());&#13;
			} catch (Exception e) {&#13;
				LOG.error(e.getMessage());&#13;
				return null;&#13;
			}&#13;
&#13;
		});&#13;
&#13;
	}&#13;
&#13;
	@Override&#13;
	protected String getStreamApplicationId() {&#13;
		return AAAA; //sample "sub1_micro_stream";&#13;
	}&#13;
&#13;
	@Override&#13;
	protected CommandType getIncomingForwardCommandType() {&#13;
		return CommandType.XXXX_COMMAND;&#13;
	}&#13;
&#13;
	@Override&#13;
	protected CommandType getIncomingRollbackCommandType() {&#13;
		return CommandType.XXXX_ROLLBACK_COMMAND;&#13;
	}&#13;
	&#13;
}&#13;
</template></templates>